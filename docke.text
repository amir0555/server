Create a Dockerfile: Create a new file named "Dockerfile" (without any file extension) in your project directory.
FROM node:16
WORKDIR /app
COPY package.json .
RUN npm install
COPY . ./
EXPOSE 3000
CMD ["npm" , "run" , "start:dev"]


-----build image ------------------------------------- 
docker build -t <image-name> .
--------------- see image -------
docker image ls 
---------------delete image --------
docker image rm <image-name>
------------run container--------

--without volums docker 
run -p <host-port>:<container-port> -d --name  <containerName any> <image-name>


--with volums docker
docker run -v /path/to/your/code:/app   -p <host-port>:<container-port> -d --name  <containerName any> <image-name>
 ---------if you don't  need docker container change your file just add :ro after app security things  
docker run -v /path/to/your/code:/app:ro   -p <host-port>:<container-port> -d --name  <containerName any> <image-name>


-----if you want to add envairment .env jsut add that in docker file with name (ENV PORT deafualt if port not exixet) and than add 
docker run -v /path/to/your/code:/app:ro --env PORT=<container-port>   -p <host-port>:<container-port>  -d --name  <containerName any> <image-name>   
or 
docker run -v /path/to/your/code:/app:ro --env-file ./.env PORT=<container-port>   -p <host-port>:<container-port>  -d --name  <containerName any> <image-name>   

path in winows  ====> %cd%  || ${PWD}

-----------see container ---------------------
docker ps Name 
----------kill container ----------
docker rm <container-id || name> -f  

if you want to delete volume also use 

docker rm <container-id || name> -fv  

-------------to take a look to your file do this ----------
docker exec -t rise-cart-rice-cart-1 bash this commend take you exectly in /app to see files just type 

ls
 ----------------------------
To exclude specific files or directories from being copied into the Docker container,
 you can use the .dockerignore file in conjunction with your Dockerfile. 
The .dockerignore file allows you to specify patterns 
for files or directories that should be ignored during the build process.


----------------------------------------------------------
To automatically reflect code changes in a Docker container,
you can use volumes to mount your source code directory as a volume within the container.
This allows the container to access the code directly from your development environment
, and any changes made to the code will be immediately reflected within the container.

 1-Modify your Dockerfile: Update your Dockerfile to include a volume directive 
    that maps your source code directory on your local machine to a directory within the container. 
-------------------VOLUME /app ---------------------
 2- Build the Docker image: Build the Docker image as you normally would using the docker 
      build command. Make sure your Dockerfile includes the volume directive.
------------- docker run -v /path/to/your/code:/app <image-name> -------------



--------------------to see env do printenv





---------------------if you dont want to run all this commend evry time you run your container 
docker run -v /path/to/your/code:/app:ro --env-file ./.env PORT=<container-port>   -p <host-port>:<container-port>  -d --name  <containerName any> <image-name>   


create docker compose file name is important 

name =====> docker-compose.yml



# The version that you need to run with specific features it supports
version: '3'

# The next thing we're going to do is specify all the containers that you need
# YAML file spacing matters, so make sure to be consistent
services:
  # Here we are creating the first container. Please enter the container name below:
  node-app:
    # Add the container configuration below (indent with two spaces)
    # Here we are building the image so you don't have to do it anymore
    build: .
    
    # We use a dash (-) if we have a list
    ports:
      - "3333:3000"
      
    volumes:
      - ./:/app:ro
      - /app/node_modules
      
    environment:
      - PORT=3000


to run this use docker-compose up



---------------///////////////////////////  manage your docker commpse see file in github to understand 

dcoker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up  -d --build






-------------------------------------------------- network ---------------------------



docker inspect network 

//////////////////////////////////////////////////
multiple files
 docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --no-deps node-app




 to see all volume do this 
 docker volume ls
  create      Create a volume
  inspect     Display detailed information on one or more volumes
  ls          List volumes
  prune       Remove all unused local volumes
  rm          Remove one or more volumesexit
  